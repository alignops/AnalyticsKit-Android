/*
 * Copyright 2018, 2020-2022 busybusy, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

plugins {
	id 'com.android.library'
	id 'kotlin-android'
}

android {
	compileSdkVersion rootProject.ext.compileSdkVersion
	buildToolsVersion rootProject.ext.buildToolsVersion

	defaultConfig {
		minSdkVersion rootProject.ext.minSdkVersion
		targetSdkVersion rootProject.ext.targetSdkVersion

		testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

	}

	buildTypes {
		release {
			debuggable false
			minifyEnabled false
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
		}
		debug {
			debuggable true
			minifyEnabled false
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
		}
	}

	sourceSets {
		test.java.srcDirs += 'src/test/kotlin'
	}
}

dependencies {
	implementation project(path: rootProject.ext.analytics_kit)
	api "org.jetbrains.kotlin:kotlin-stdlib:$rootProject.ext.kotlinVersion"
	api 'androidx.annotation:annotation:1.2.0'
	api "androidx.annotation:annotation:1.2.0"
	compileOnly 'com.google.firebase:firebase-analytics:19.0.0'

	testImplementation 'com.google.firebase:firebase-analytics:19.0.0'
	testImplementation 'junit:junit:4.12'
	testImplementation "org.jetbrains.kotlin:kotlin-stdlib:$rootProject.ext.kotlinVersion"
	testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$rootProject.ext.kotlinVersion"
	testImplementation "org.assertj:assertj-core:$rootProject.ext.assertjVersion"
	testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0'
	testImplementation 'org.mockito:mockito-core:3.8.0'
	testImplementation 'org.robolectric:robolectric:4.6.1'
}

afterEvaluate {
	publishing {
		publications {
			releaseFirebase(MavenPublication) { // Creates a Maven publication called "releaseFirebase".
				from components.release // Applies the component for the release build variant.

				groupId = 'com.github.busybusy.AnalyticsKit-Android'
				artifactId = 'firebase-provider'
				version = "$VERSION_NAME"
			}
			debugFirebase(MavenPublication) { // Creates a Maven publication called “debugFirebase”.
				from components.debug // Applies the component for the debug build variant.

				groupId = 'com.github.busybusy.AnalyticsKit-Android'
				artifactId = 'firebase-provider-debug'
				version = "$VERSION_NAME"
			}
		}
	}
}

task sourcesJar(type: Jar) {
	archiveClassifier.set("sources")
	from android.sourceSets.main.java.srcDirs
}

task javadoc(type: Javadoc) {
	failOnError false
	source = android.sourceSets.main.java.sourceFiles
	setClasspath(getClasspath() + project.files(android.getBootClasspath().join(File.pathSeparator)))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	archiveClassifier.set("javadoc")
	from javadoc.destinationDir
}

artifacts {
	archives sourcesJar
	archives javadocJar
}
