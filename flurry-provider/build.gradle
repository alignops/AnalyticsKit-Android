/*
 * Copyright 2018, 2020-2023 busybusy, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

plugins {
	id 'com.android.library'
	id 'kotlin-android'
}

android {
	namespace 'com.busybusy.flurry_provider'
	compileSdkVersion rootProject.ext.compileSdkVersion
	buildToolsVersion rootProject.ext.buildToolsVersion

	defaultConfig {
		minSdkVersion rootProject.ext.minSdkVersion
		targetSdkVersion rootProject.ext.targetSdkVersion
	}
	buildTypes {
		release {
			debuggable false
			minifyEnabled false
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
		}
		debug {
			debuggable true
			minifyEnabled false
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
		}
	}

	compileOptions {
		sourceCompatibility = 17
		targetCompatibility = 17
	}

	sourceSets {
		main.java.srcDirs += 'src/main/kotlin'
		test.java.srcDirs += 'src/test/kotlin'
	}

	testOptions {
		unitTests.returnDefaultValues = true
	}
}

dependencies {
	implementation project(path: rootProject.ext.analytics_kit)
	api "org.jetbrains.kotlin:kotlin-stdlib:$rootProject.ext.kotlinVersion"
	api "androidx.annotation:annotation:$rootProject.ext.annotationsVersion"
	compileOnly 'com.flurry.android:analytics:13.3.0'

	testImplementation 'com.flurry.android:analytics:13.3.0'
	testImplementation "junit:junit:$rootProject.ext.junit_version"
	testImplementation "org.assertj:assertj-core:$rootProject.ext.assertjVersion"
	testImplementation "org.jetbrains.kotlin:kotlin-stdlib:$rootProject.ext.kotlinVersion"
	testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$rootProject.ext.kotlinVersion"
	testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$rootProject.ext.mockitoKotlinVersion"
	testImplementation "org.mockito:mockito-inline:$rootProject.ext.mockitoVersion"
}

afterEvaluate {
	publishing {
		publications {
			releaseFlurry(MavenPublication) { // Creates a Maven publication called "releaseFlurry".
				from components.release // Applies the component for the release build variant.

				groupId = 'com.github.busybusy.AnalyticsKit-Android'
				artifactId = 'flurry-provider'
				version = "$VERSION_NAME"
			}
			debugFlurry(MavenPublication) { // Creates a Maven publication called “debugFlurry”.
				from components.debug // Applies the component for the debug build variant.

				groupId = 'com.github.busybusy.AnalyticsKit-Android'
				artifactId = 'flurry-provider-debug'
				version = "$VERSION_NAME"
			}
		}
	}
}

task sourcesJar(type: Jar) {
	archiveClassifier.set("sources")
	from android.sourceSets.main.java.srcDirs
}

task javadoc(type: Javadoc) {
	failOnError  false
	source = android.sourceSets.main.java.sourceFiles
	setClasspath(getClasspath() + project.files(android.getBootClasspath().join(File.pathSeparator)))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	archiveClassifier.set("javadoc")
	from javadoc.destinationDir
}

artifacts {
	archives sourcesJar
	archives javadocJar
}
