/*
 * Copyright 2018, 2020-2023 busybusy, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

plugins {
    id 'com.android.library'
    id 'kotlin-android'
}

android {
    namespace 'com.busybusy.graylog_provider'
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            debuggable false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility = 17
        targetCompatibility = 17
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }
}

dependencies {
    implementation project(path: rootProject.ext.analytics_kit)
    api "org.jetbrains.kotlin:kotlin-stdlib:$rootProject.ext.kotlinVersion"
    compileOnly 'com.squareup.okhttp3:okhttp:4.9.3'

    api "androidx.annotation:annotation:$rootProject.ext.annotationsVersion"

    testImplementation "junit:junit:$rootProject.ext.junit_version"
    testImplementation "org.assertj:assertj-core:$rootProject.ext.assertjVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-stdlib:$rootProject.ext.kotlinVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$rootProject.ext.kotlinVersion"
    testImplementation 'org.robolectric:robolectric:4.10.3'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.9.1'
    testImplementation "org.mockito:mockito-core:$rootProject.ext.mockitoVersion"
}

afterEvaluate {
    publishing {
        publications {
            releaseGraylog(MavenPublication) { // Creates a Maven publication called "releaseGraylog".
                from components.release // Applies the component for the release build variant.

                groupId = 'com.github.busybusy.AnalyticsKit-Android'
                artifactId = 'graylog-provider'
                version = "$VERSION_NAME"
            }
            debugGraylog(MavenPublication) { // Creates a Maven publication called “debugGraylog”.
                from components.debug // Applies the component for the debug build variant.

                groupId = 'com.github.busybusy.AnalyticsKit-Android'
                artifactId = 'graylog-provider-debug'
                version = "$VERSION_NAME"
            }
        }
    }
}

task sourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from android.sourceSets.main.java.srcDirs
}

task javadoc(type: Javadoc) {
    failOnError  false
    source = android.sourceSets.main.java.sourceFiles
    setClasspath(getClasspath() + project.files(android.getBootClasspath().join(File.pathSeparator)))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set("javadoc")
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}
